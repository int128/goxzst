// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/goxzst/adaptors/interfaces (interfaces: Env,Filesystem)

// Package mock_adaptors is a generated GoMock package.
package mock_adaptors

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/int128/goxzst/adaptors/interfaces"
	io "io"
	os "os"
	reflect "reflect"
)

// MockEnv is a mock of Env interface
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockEnv) Exec(arg0 interfaces.ExecIn) error {
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockEnvMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockEnv)(nil).Exec), arg0)
}

// Getwd mocks base method
func (m *MockEnv) Getwd() (string, error) {
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd
func (mr *MockEnvMockRecorder) Getwd() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockEnv)(nil).Getwd))
}

// LookupEnv mocks base method
func (m *MockEnv) LookupEnv(arg0 string) (string, bool) {
	ret := m.ctrl.Call(m, "LookupEnv", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv
func (mr *MockEnvMockRecorder) LookupEnv(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockEnv)(nil).LookupEnv), arg0)
}

// MockFilesystem is a mock of Filesystem interface
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFilesystem) Create(arg0 string) (io.WriteCloser, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFilesystemMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilesystem)(nil).Create), arg0)
}

// GetMode mocks base method
func (m *MockFilesystem) GetMode(arg0 string) (os.FileMode, error) {
	ret := m.ctrl.Call(m, "GetMode", arg0)
	ret0, _ := ret[0].(os.FileMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMode indicates an expected call of GetMode
func (mr *MockFilesystemMockRecorder) GetMode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMode", reflect.TypeOf((*MockFilesystem)(nil).GetMode), arg0)
}

// MkdirAll mocks base method
func (m *MockFilesystem) MkdirAll(arg0 string) error {
	ret := m.ctrl.Call(m, "MkdirAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockFilesystemMockRecorder) MkdirAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFilesystem)(nil).MkdirAll), arg0)
}

// Open mocks base method
func (m *MockFilesystem) Open(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockFilesystemMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFilesystem)(nil).Open), arg0)
}

// Remove mocks base method
func (m *MockFilesystem) Remove(arg0 string) error {
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockFilesystemMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFilesystem)(nil).Remove), arg0)
}

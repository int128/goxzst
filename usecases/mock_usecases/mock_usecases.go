// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/goxzst/usecases/interfaces (interfaces: Make,CrossBuild,Archive,Digest,RenderTemplate)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/int128/goxzst/usecases/interfaces"
	reflect "reflect"
)

// MockMake is a mock of Make interface
type MockMake struct {
	ctrl     *gomock.Controller
	recorder *MockMakeMockRecorder
}

// MockMakeMockRecorder is the mock recorder for MockMake
type MockMakeMockRecorder struct {
	mock *MockMake
}

// NewMockMake creates a new mock instance
func NewMockMake(ctrl *gomock.Controller) *MockMake {
	mock := &MockMake{ctrl: ctrl}
	mock.recorder = &MockMakeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMake) EXPECT() *MockMakeMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockMake) Do(arg0 interfaces.MakeIn) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockMakeMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockMake)(nil).Do), arg0)
}

// MockCrossBuild is a mock of CrossBuild interface
type MockCrossBuild struct {
	ctrl     *gomock.Controller
	recorder *MockCrossBuildMockRecorder
}

// MockCrossBuildMockRecorder is the mock recorder for MockCrossBuild
type MockCrossBuildMockRecorder struct {
	mock *MockCrossBuild
}

// NewMockCrossBuild creates a new mock instance
func NewMockCrossBuild(ctrl *gomock.Controller) *MockCrossBuild {
	mock := &MockCrossBuild{ctrl: ctrl}
	mock.recorder = &MockCrossBuildMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrossBuild) EXPECT() *MockCrossBuildMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCrossBuild) Do(arg0 interfaces.CrossBuildIn) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCrossBuildMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCrossBuild)(nil).Do), arg0)
}

// MockArchive is a mock of Archive interface
type MockArchive struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveMockRecorder
}

// MockArchiveMockRecorder is the mock recorder for MockArchive
type MockArchiveMockRecorder struct {
	mock *MockArchive
}

// NewMockArchive creates a new mock instance
func NewMockArchive(ctrl *gomock.Controller) *MockArchive {
	mock := &MockArchive{ctrl: ctrl}
	mock.recorder = &MockArchiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchive) EXPECT() *MockArchiveMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockArchive) Do(arg0 interfaces.ArchiveIn) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockArchiveMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockArchive)(nil).Do), arg0)
}

// MockDigest is a mock of Digest interface
type MockDigest struct {
	ctrl     *gomock.Controller
	recorder *MockDigestMockRecorder
}

// MockDigestMockRecorder is the mock recorder for MockDigest
type MockDigestMockRecorder struct {
	mock *MockDigest
}

// NewMockDigest creates a new mock instance
func NewMockDigest(ctrl *gomock.Controller) *MockDigest {
	mock := &MockDigest{ctrl: ctrl}
	mock.recorder = &MockDigestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDigest) EXPECT() *MockDigestMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockDigest) Do(arg0 interfaces.DigestIn) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockDigestMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDigest)(nil).Do), arg0)
}

// MockRenderTemplate is a mock of RenderTemplate interface
type MockRenderTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockRenderTemplateMockRecorder
}

// MockRenderTemplateMockRecorder is the mock recorder for MockRenderTemplate
type MockRenderTemplateMockRecorder struct {
	mock *MockRenderTemplate
}

// NewMockRenderTemplate creates a new mock instance
func NewMockRenderTemplate(ctrl *gomock.Controller) *MockRenderTemplate {
	mock := &MockRenderTemplate{ctrl: ctrl}
	mock.recorder = &MockRenderTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenderTemplate) EXPECT() *MockRenderTemplateMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockRenderTemplate) Do(arg0 interfaces.RenderTemplateIn) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockRenderTemplateMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRenderTemplate)(nil).Do), arg0)
}

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/int128/goxzst/adaptors/cmd"
	"github.com/int128/goxzst/adaptors/env"
	"github.com/int128/goxzst/adaptors/fs"
	"github.com/int128/goxzst/adaptors/logger"
	"github.com/int128/goxzst/usecases/archive"
	"github.com/int128/goxzst/usecases/crossbuild"
	"github.com/int128/goxzst/usecases/digest"
	"github.com/int128/goxzst/usecases/rendertemplate"
	"github.com/int128/goxzst/usecases/xzs"
	"github.com/int128/goxzst/usecases/xzst"
)

// Injectors from di.go:

func NewCmd() cmd.Interface {
	envEnv := &env.Env{}
	fileSystem := &fs.FileSystem{}
	loggerLogger := &logger.Logger{}
	crossBuild := &crossbuild.CrossBuild{
		Env:        envEnv,
		FileSystem: fileSystem,
		Logger:     loggerLogger,
	}
	archiveArchive := &archive.Archive{
		FileSystem: fileSystem,
		Logger:     loggerLogger,
	}
	digestDigest := &digest.Digest{
		FileSystem: fileSystem,
		Logger:     loggerLogger,
	}
	xzsXZS := &xzs.XZS{
		CrossBuild: crossBuild,
		Archive:    archiveArchive,
		Digest:     digestDigest,
	}
	renderTemplate := &rendertemplate.RenderTemplate{
		Env:        envEnv,
		FileSystem: fileSystem,
		Logger:     loggerLogger,
	}
	xzstXZST := &xzst.XZST{
		XZS:            xzsXZS,
		RenderTemplate: renderTemplate,
		FileSystem:     fileSystem,
		Logger:         loggerLogger,
	}
	cmdCmd := &cmd.Cmd{
		XZST:   xzstXZST,
		Env:    envEnv,
		Logger: loggerLogger,
	}
	return cmdCmd
}
